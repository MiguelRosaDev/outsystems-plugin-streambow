// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FeedbackFramework
import Accounts
import BackgroundTasks
import CallKit
import SystemConfiguration.CaptiveNetwork
import CommonCrypto
import CoreBluetooth
import CoreLocation
import CoreTelephony
@_exported import FeedbackFramework
import Foundation
import Network
import SQLite3
import Social
import Swift
import SwiftProtobuf
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (FeedbackFramework.Reachability) -> ()
  public typealias NetworkUnreachable = (FeedbackFramework.Reachability) -> ()
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: FeedbackFramework.Reachability.Connection, b: FeedbackFramework.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: FeedbackFramework.Reachability.NetworkReachable?
  public var whenUnreachable: FeedbackFramework.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  public var connection: FeedbackFramework.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension FeedbackFramework.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func anchor(centerX: UIKit.NSLayoutXAxisAnchor?, centerY: UIKit.NSLayoutYAxisAnchor?, top: UIKit.NSLayoutYAxisAnchor?, leading: UIKit.NSLayoutXAxisAnchor?, bottom: UIKit.NSLayoutYAxisAnchor?, trailing: UIKit.NSLayoutXAxisAnchor?, padding: UIKit.UIEdgeInsets = .zero, size: CoreGraphics.CGSize = .zero)
}
extension UIKit.UINavigationBar {
  @_Concurrency.MainActor(unsafe) public func transparentNavigationBar()
  @_Concurrency.MainActor(unsafe) public func mainNavigationBar()
}
extension UIKit.UINavigationItem {
  @_Concurrency.MainActor(unsafe) public func mainNavigationItemLeft(_ target: Any?, action: ObjectiveC.Selector, image: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) public func mainNavigationItemRight(_ target: Any?, action: ObjectiveC.Selector, image: UIKit.UIImage)
}
@_hasMissingDesignatedInitializers public class NetStatus {
  public static let shared: FeedbackFramework.NetStatus
  public var isMonitoring: Swift.Bool
  public var didStartMonitoringHandler: (() -> Swift.Void)?
  public var didStopMonitoringHandler: (() -> Swift.Void)?
  public var netStatusChangeHandler: (() -> Swift.Void)?
  public var isConnected: Swift.Bool {
    get
  }
  public var interfaceType: Network.NWInterface.InterfaceType? {
    get
  }
  public var availableInterfacesTypes: [Network.NWInterface.InterfaceType]? {
    get
  }
  @objc deinit
  public func startMonitoring()
  public func stopMonitoring()
}
public struct Units {
  public let bytes: Swift.Int64
  public var kilobytes: Swift.Double {
    get
  }
  public var megabytes: Swift.Double {
    get
  }
  public var gigabytes: Swift.Double {
    get
  }
  public init(bytes: Swift.Int64)
  public func getReadableUnit() -> Swift.String
}
public protocol SimpleTracerLogger : AnyObject {
  func logTrace(_ trace: Swift.String)
}
@objc public class Traceroute : ObjectiveC.NSObject {
  public var result: Swift.String {
    get
  }
  public var completion: (([Swift.String : Any]) -> Swift.Void)?
  public init(host: Swift.String)
  @discardableResult
  public static func trace(host: Swift.String, logger: FeedbackFramework.SimpleTracerLogger? = nil, maxTraceTTL: Swift.Int = 10, completion: (([Swift.String : Any]) -> Swift.Void)?) -> FeedbackFramework.Traceroute
  public func start()
  public func stop()
  @objc deinit
}
extension FeedbackFramework.Traceroute : FeedbackFramework.SimplePingDelegate {
  @objc dynamic public func simplePing(_ pinger: FeedbackFramework.SimplePing, didStartWithAddress address: Foundation.Data)
  @objc dynamic public func simplePing(_ pinger: FeedbackFramework.SimplePing, didFailWithError error: Swift.Error)
  @objc dynamic public func simplePing(_ pinger: FeedbackFramework.SimplePing, didSendPacket packet: Foundation.Data, sequenceNumber: Swift.UInt16)
  @objc dynamic public func simplePing(_ pinger: FeedbackFramework.SimplePing, didFailToSendPacket packet: Foundation.Data, sequenceNumber: Swift.UInt16, error: Swift.Error)
  @objc dynamic public func simplePing(_ pinger: FeedbackFramework.SimplePing, didReceivePingResponsePacket packet: Foundation.Data, sequenceNumber: Swift.UInt16)
  @objc dynamic public func simplePing(_ pinger: FeedbackFramework.SimplePing, didReceiveUnexpectedPacket packet: Foundation.Data)
}
@objc @_inheritsConvenienceInitializers public class FileUploadHelper : ObjectiveC.NSObject {
  public func fileUploadRequest(filename: Swift.String, type: Swift.Int32, imageData: Foundation.Data, completion: @escaping (_ success: Swift.Bool) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PhotographData : ObjectiveC.NSObject {
  public func photographData(fileName: Swift.String) -> Foundation.NSMutableDictionary
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public func getCPUName() -> Swift.String
  @_Concurrency.MainActor(unsafe) public func getCPUSpeed() -> Swift.String
  @_Concurrency.MainActor(unsafe) public func CPUinfo() -> Swift.Dictionary<Swift.String, Swift.String>
  @_Concurrency.MainActor(unsafe) public var modelName: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class YoutubeDiagnostic : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func show(animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func dismiss(animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func loadVideo(completion: @escaping (_ success: Foundation.NSMutableDictionary) -> Swift.Void)
  @objc deinit
}
extension FeedbackFramework.YoutubeDiagnostic : FeedbackFramework.YTPlayerViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func playerViewDidBecomeReady(_ playerView: FeedbackFramework.YTPlayerView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func playerView(_ playerView: FeedbackFramework.YTPlayerView, didPlayTime playTime: Swift.Float)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func playerView(_ playerView: FeedbackFramework.YTPlayerView, receivedError error: FeedbackFramework.YTPlayerError)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func playerView(_ playerView: FeedbackFramework.YTPlayerView, didChangeTo state: FeedbackFramework.YTPlayerState)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func playerView(_ playerView: FeedbackFramework.YTPlayerView, didChangeTo quality: FeedbackFramework.YTPlaybackQuality)
}
@objc @_inheritsConvenienceInitializers public class LocationManager : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  @objc override dynamic public init()
  public func startGPSUpdating()
  public func stopGPSUpdating(_ erro: Swift.Error?)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: Swift.Error)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class ActivityIndicator {
  open class var shared: FeedbackFramework.ActivityIndicator {
    get
  }
  open func showActivityIndicatory(uiView: UIKit.UIView)
  open func showActivityIndicatorInViewWithNavigationBar(uiView: UIKit.UIView)
  open func showActivityIndicatorInViewWithNavigationBarAndLabel(uiView: UIKit.UIView, labelText: Swift.String)
  open func showActivityIndicatorInView(uiView: UIKit.UIView)
  open func hideActivityIndicator()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Feedback : ObjectiveC.NSObject {
  public func performFeedbackDiagnostic(latitude: Swift.String, longitude: Swift.String, inOutStatus: Swift.Int, feedbackType: Swift.Int, completion: @escaping (_ success: Swift.Bool) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class Main : ObjectiveC.NSObject {
  @objc public func initializer()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FloorPlanTest : ObjectiveC.NSObject {
  public func performFloorPlanTests(completion: @escaping (_ success: Swift.Bool) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ScheduleTest : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class NetworkTest : ObjectiveC.NSObject {
  @objc public func performTests(customerID: Swift.String?, completion: @escaping (_ success: Swift.Bool) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension FeedbackFramework.Reachability.Connection : Swift.Equatable {}
extension FeedbackFramework.Reachability.Connection : Swift.Hashable {}
